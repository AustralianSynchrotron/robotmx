#include "mxrobotdefs.inc"
#include "GCassettedefs.inc"

Global Real g_AngleOfFirstColumn(NUM_CASSETTES)
Global Real g_UForNormalStandby(NUM_CASSETTES)
Global Real g_UForSecondaryStandby(NUM_CASSETTES)
Global Real g_UForPuckStandby(NUM_CASSETTES)

'' Tilt Information for Each Cassette
Global Real g_tiltDX(NUM_CASSETTES)
Global Real g_tiltDY(NUM_CASSETTES)

'' Actual Cassette Center's X,Y Coordinates obtained using tilt information
Global Real g_CenterX(NUM_CASSETTES)
Global Real g_CenterY(NUM_CASSETTES)


Function GTCassetteName$(cassette_position As Integer) As String
	If cassette_position = LEFT_CASSETTE Then
		GTCassetteName$ = "left_cassette"
	ElseIf cassette_position = MIDDLE_CASSETTE Then
		GTCassetteName$ = "middle_cassette"
	ElseIf cassette_position = RIGHT_CASSETTE Then
		GTCassetteName$ = "right_cassette"
	EndIf
Fend

Function GTSetupDirection(cassette_position As Integer, column_A_Angle As Real, standbyU As Real, secondaryStandbyU As Real)
	g_AngleOfFirstColumn(cassette_position) = column_A_Angle
	g_UForNormalStandby(cassette_position) = standbyU
	g_UForSecondaryStandby(cassette_position) = secondaryStandbyU
	g_UForPuckStandby(cassette_position) = (standbyU + secondaryStandbyU) / 2.0
Fend

Function GTSetupCoordinates(cassette_position As Integer, pointNum As Integer)
	PLabel pointNum, GTCassetteName$(cassette_position)
Fend

Function GTSetupTilt(cassette_position As Integer, topPointNum As Integer, bottomPointNum As Integer, ByRef StatusStringToAppend$ As String) As Boolean
	Real deltaZ
	deltaZ = CZ(P(topPointNum)) - CZ(P(bottomPointNum))
	
	If (deltaZ < CASSETTE_HEIGHT / 2.0) Then
		StatusStringToAppend$ = StatusStringToAppend$ + " For " + GTCassetteName$(cassette_position) + ", deltaZ is less than half of Normal Cassette Height!"
		GTSetupTilt = False
		Return
	EndIf

	Real deltaX, deltaY
	deltaX = CX(P(topPointNum)) - CX(P(bottomPointNum))
	deltaY = CY(P(topPointNum)) - CY(P(bottomPointNum))
	
	Real distance, tiltAngle
	distance = Sqr((deltaX * deltaX) + (deltaY * deltaY))
	tiltAngle = RadToDeg(Atan(distance / deltaZ))
	
	'' Check whether tiltAngle is less than 1 degree
	If (tiltAngle > 1) Then
		StatusStringToAppend$ = StatusStringToAppend$ + " " + GTCassetteName$(cassette_position) + " has a tiltAngle of " + Str$(tiltAngle) + " degrees!"
		GTSetupTilt = False
		Return
	EndIf
	
	g_tiltDX(cassette_position) = deltaX / deltaZ
	g_tiltDY(cassette_position) = deltaY / deltaZ
	
	g_CenterX(cassette_position) = CX(P(bottomPointNum)) + g_tiltDX(cassette_position) * (CZ(P(PNumber(GTCassetteName$(cassette_position)))) - CZ(P(bottomPointNum)))
	g_CenterY(cassette_position) = CY(P(bottomPointNum)) + g_tiltDY(cassette_position) * (CZ(P(PNumber(GTCassetteName$(cassette_position)))) - CZ(P(bottomPointNum)))
	
	GTSetupTilt = True
Fend

Function GTSetupCassetteAllProperties(cassette_position As Integer, ByRef StatusStringToAppend$ As String) As Boolean
	Real standbyU, secondaryStandbyU
	Integer Cassette_CenterPoint, Cassette_TopPoint, Cassette_BottomPoint
	Real column_A_Angle
	
	'' Set StandbyU to be dumbbell's perfect orientation angle + 90 degrees bounded by (-180,180]
	standbyU = g_dumbbell_Perfect_Angle + 90
	standbyU = CU(P6) + GTBoundAngle(-180, 180, standbyU - CU(P6))
	
	Select cassette_position
		Case LEFT_CASSETTE
			column_A_Angle = g_Perfect_LeftCassette_Angle
			Cassette_CenterPoint = 34
			Cassette_TopPoint = 41
			Cassette_BottomPoint = 44
			secondaryStandbyU = standbyU - 90
		Case MIDDLE_CASSETTE
			column_A_Angle = g_Perfect_MiddleCassette_Angle
			Cassette_CenterPoint = 35
			Cassette_TopPoint = 42
			Cassette_BottomPoint = 45
			secondaryStandbyU = standbyU
		Case RIGHT_CASSETTE
			column_A_Angle = g_Perfect_RightCassette_Angle
			Cassette_CenterPoint = 36
			Cassette_TopPoint = 43
			Cassette_BottomPoint = 46
			secondaryStandbyU = standbyU + 90
	Send

	GTSetupDirection cassette_position, column_A_Angle, standbyU, secondaryStandbyU
	GTSetupCoordinates cassette_position, Cassette_CenterPoint
	
	String GTSetupTiltStatus$
	If Not GTSetupTilt(cassette_position, Cassette_TopPoint, Cassette_BottomPoint, ByRef GTSetupTiltStatus$) Then
		StatusStringToAppend$ = StatusStringToAppend$ + " GTSetupCassetteAllProperties called GTSetupTilt:" + GTSetupTiltStatus$
		GTSetupCassetteAllProperties = False
		Return
	EndIf
	
	GTSetupCassetteAllProperties = True
Fend

