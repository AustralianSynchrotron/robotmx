#include "mxrobotdefs.inc"

Function GCheckPoint(pointNum As Integer, ByRef StatusStringToAppend$ As String) As Boolean
	If Not PDef(P(pointNum)) Or CX(P(pointNum)) = 0 Or CY(P(pointNum)) = 0 Then
		StatusStringToAppend$ = StatusStringToAppend$ + " P" + Str$(pointNum) + " is not defined yet!"
		GCheckPoint = False
	Else
		GCheckPoint = True
	EndIf
Fend

Function GCheckTool(toolNum As Integer, ByRef StatusStringToAppend$ As String) As Boolean
	P51 = TLSet(toolNum)
	If CX(P51) = 0 Or CY(P51) = 0 Or CU(P51) = 0 Then
		StatusStringToAppend$ = StatusStringToAppend$ + " Tool(" + Str$(toolNum) + ") is not defined yet!"
		GCheckTool = False
	Else
		GCheckTool = True
	EndIf
Fend

Function InitBasicPoints(ByRef StatusStringToAppend$ As String) As Boolean
 	String GCheckPointStatus$
 	'' Check Points P0, P1 and P18
	If GCheckPoint(0, ByRef GCheckPointStatus$) Or GCheckPoint(1, ByRef GCheckPointStatus$) Or GCheckPoint(18, ByRef GCheckPointStatus$) Then
		StatusStringToAppend$ = "InitBasicPoints called GCheckPoint: " + GCheckPointStatus$
		InitBasicPoints = False
	Else
		InitBasicPoints = True
	EndIf
Fend

Function InitMagnetPoints(ByRef StatusStringToAppend$ As String) As Boolean
	String GCheckPointStatus$
 	'' Check Points P6, P16 and P26
	If GCheckPoint(6, ByRef GCheckPointStatus$) Or GCheckPoint(16, ByRef GCheckPointStatus$) Or GCheckPoint(26, ByRef GCheckPointStatus$) Then
		StatusStringToAppend$ = "InitMagnetPoints called GCheckPoint: " + GCheckPointStatus$
		InitMagnetPoints = False
		Return
	EndIf
	
	'' Check Points P10, P11 and P12
	If GCheckPoint(10, ByRef GCheckPointStatus$) Or GCheckPoint(11, ByRef GCheckPointStatus$) Or GCheckPoint(12, ByRef GCheckPointStatus$) Then
		StatusStringToAppend$ = "InitMagnetPoints called GCheckPoint: " + GCheckPointStatus$
		InitMagnetPoints = False
		Return
	EndIf
	
	String GCheckToolStatus$
	'' Check Tool 1 (pickerTool) and Tool 2 (placerTool)
	If GCheckTool(1, ByRef GCheckToolStatus$) Or GCheckTool(2, ByRef GCheckToolStatus$) Then
		StatusStringToAppend$ = "InitMagnetPoints called GCheckTool: " + GCheckToolStatus$
		InitMagnetPoints = False
		Return
	EndIf
	
	
	'' Above required Points and Tools are defined. Start deriving magnet points
	'' dumbbell Orientation in World Coordinates when dumbbell is on cradle
	g_dumbbell_Perfect_Angle = GAngleToPerfectOrientationAngle(CU(P6))
	g_dumbbell_Perfect_cosValue = Cos(g_dumbbell_Perfect_Angle)
	g_dumbbell_Perfect_sinValue = Sin(g_dumbbell_Perfect_Angle)
	
	'' Cooling Point: 20mm in the perpendicular direction from center of dumbbell
	P3 = P6 +X(20.0 * -g_dumbbell_Perfect_sinValue) +Y(20.0 * g_dumbbell_Perfect_cosValue)

	'' High Above CoolPoint, get the tong out of LN2
	P2 = P3 :Z(-2)
		
	'' Above Center of dumbbell, middle of cassette height
	P4 = P6 +Z(30.0)
	
	'' Picker Ready Position: 10mm in front of picker
	P17 = P16 +X(10.0 * g_dumbbell_Perfect_cosValue) +Y(10.0 * g_dumbbell_Perfect_sinValue)
	'' Placer Ready Position: 10mm in front of placer
	P27 = P26 -X(10.0 * g_dumbbell_Perfect_cosValue) -Y(10.0 * g_dumbbell_Perfect_sinValue)
	
	'' 35mm in the perpendicular direction from center of picker magnet when dumbbell on cradle
	P93 = P16 +X(35.0 * -g_dumbbell_Perfect_sinValue) +Y(35.0 * g_dumbbell_Perfect_cosValue)
	'' 35mm in the perpendicular direction from center of placer magnet when dumbbell on cradle
	P94 = P26 +X(35.0 * -g_dumbbell_Perfect_sinValue) +Y(35.0 * g_dumbbell_Perfect_cosValue)
	
	
	Real dumbbell_cos_plus_sin, dumbbell_cos_minus_sin
	dumbbell_cos_plus_sin = g_dumbbell_Perfect_cosValue + g_dumbbell_Perfect_sinValue
	dumbbell_cos_minus_sin = g_dumbbell_Perfect_cosValue - g_dumbbell_Perfect_sinValue
	'' Middle point of Arc from cooling point to picker magnet
	P15 = P16 +X(17.5 * dumbbell_cos_minus_sin) +Y(17.5 * dumbbell_cos_plus_sin)
	'' Middle point of Arc from cooling point to placer magnet
	P25 = P26 +X(17.5 * -dumbbell_cos_plus_sin) +Y(17.5 * dumbbell_cos_minus_sin)
	
	
	'' To avoid Tong touching dumbbell head (with 0.5 as additional buffer offset)
	Real tong_dumbbell_gap
	tong_dumbbell_gap = MAGNET_HEAD_RADIUS + CAVITY_RADIUS + 0.5
	P5 = P16 +X(tong_dumbbell_gap * -g_dumbbell_Perfect_sinValue) +Y(tong_dumbbell_gap * g_dumbbell_Perfect_cosValue)
	
	InitMagnetPoints = True
Fend

Function InitCassettePoints(ByRef StatusStringToAppend$ As String) As Boolean
	String GCheckPointStatus$
	
 	'' Check Point P6: dumbbell cradle needed to decided cassette orientation
	If GCheckPoint(6, ByRef GCheckPointStatus$) Then
		StatusStringToAppend$ = "InitCassettePoints called GCheckPoint: " + GCheckPointStatus$
		InitCassettePoints = False
		Return
	EndIf
	
	'' Check Left Cassette Points P34, P41 and P44
	If GCheckPoint(34, ByRef GCheckPointStatus$) Or GCheckPoint(41, ByRef GCheckPointStatus$) Or GCheckPoint(44, ByRef GCheckPointStatus$) Then
		StatusStringToAppend$ = "InitCassettePoints called GCheckPoint: " + GCheckPointStatus$
		InitCassettePoints = False
		Return
	EndIf
	
	'' Check Middle Cassette Points P35, P42 and P45
	If GCheckPoint(35, ByRef GCheckPointStatus$) Or GCheckPoint(42, ByRef GCheckPointStatus$) Or GCheckPoint(45, ByRef GCheckPointStatus$) Then
		StatusStringToAppend$ = "InitCassettePoints called GCheckPoint: " + GCheckPointStatus$
		InitCassettePoints = False
		Return
	EndIf
	
	'' Check Right Cassette Points P36, P43 and P46
	If GCheckPoint(36, ByRef GCheckPointStatus$) Or GCheckPoint(43, ByRef GCheckPointStatus$) Or GCheckPoint(46, ByRef GCheckPointStatus$) Then
		StatusStringToAppend$ = "InitCassettePoints called GCheckPoint: " + GCheckPointStatus$
		InitCassettePoints = False
		Return
	EndIf
	
Fend
