#include "networkdefs.inc"
#include "genericdefs.inc"
#include "cassettedefs.inc"
#include "superpuckdefs.inc"
#include "mountingdefs.inc"
#include "jsondefs.inc"

Function GTgetPortIndexFromCassetteVars(cassette_position As Integer, columnPuckIndex As Integer, rowPuckPortIndex As Integer) As Integer
	If g_CassetteType(cassette_position) = SUPERPUCK_CASSETTE Then
		GTgetPortIndexFromCassetteVars = columnPuckIndex * NUM_PUCK_PORTS + rowPuckPortIndex
	ElseIf (g_CassetteType(cassette_position) = NORMAL_CASSETTE Or g_CassetteType(cassette_position) = CALIBRATION_CASSETTE) Then
		GTgetPortIndexFromCassetteVars = columnPuckIndex * NUM_ROWS + rowPuckPortIndex
	EndIf
Fend

Function GTsendNormalCassetteData(dataToSend As Integer, cassette_position As Integer)
	'' This function also sends Calibration Cassette data
	
	String JSONResponse$
	Integer portsPerJSONPacket, numJSONPackets, responseJSONPacketIndex
	Integer startPortIndex, endPortIndex, portIndex
	Integer columnIndex, rowIndex
	Integer puckIndex, puckPortIndex

	portsPerJSONPacket = 16
	numJSONPackets = (NUM_ROWS * NUM_COLUMNS) / portsPerJSONPacket
	
	For responseJSONPacketIndex = 0 To numJSONPackets - 1
		startPortIndex = responseJSONPacketIndex * portsPerJSONPacket
		endPortIndex = (responseJSONPacketIndex + 1) * portsPerJSONPacket - 1
		
		If dataToSend = PORT_STATES Then
			JSONResponse$ = "{'set':'port_states'"
		ElseIf dataToSend = SAMPLE_DISTANCES Then
			JSONResponse$ = "{'set':'sample_distances'"
		ElseIf dataToSend = PORT_FORCES Then
			JSONResponse$ = "{'set':'port_forces'"
		Else
			UpdateClient(TASK_MSG, "Invalid dataToSend Request!", ERROR_LEVEL)
			Exit Function
		EndIf

		JSONResponse$ = JSONResponse$ + ",'position':'" + GTCassettePosition$(cassette_position) + "'"
		JSONResponse$ = JSONResponse$ + ",'type':'" + GTCassetteType$(g_CassetteType(cassette_position)) + "'"
		JSONResponse$ = JSONResponse$ + ",'start':" + Str$(startPortIndex) + ",'value':["
		For portIndex = startPortIndex To endPortIndex
			ColumnIndex = portIndex / NUM_ROWS
			rowIndex = portIndex - (ColumnIndex * NUM_ROWS)
			
			If dataToSend = PORT_STATES Then
				JSONResponse$ = JSONResponse$ + Str$(g_CAS_PortStatus(cassette_position, rowIndex, ColumnIndex)) + "," ''GTPortStatusString$
			ElseIf dataToSend = SAMPLE_DISTANCES Then
				JSONResponse$ = JSONResponse$ + FmtStr$(g_CASSampleDistanceError(cassette_position, rowIndex, ColumnIndex), "0.00") + ","
			ElseIf dataToSend = PORT_FORCES Then
				JSONResponse$ = JSONResponse$ + FmtStr$(g_CAS_PortForce(cassette_position, rowIndex, ColumnIndex), "0.00") + ","
			EndIf
		Next
		JSONResponse$ = JSONResponse$ + "]}"

		UpdateClient(CLIENT_UPDATE, JSONResponse$, INFO_LEVEL)
	Next

Fend

Function GTsendSuperPuckData(dataToSend As Integer, cassette_position As Integer)
	String JSONResponse$
	Integer portsPerJSONPacket, numJSONPackets, responseJSONPacketIndex
	Integer startPortIndex, endPortIndex, portIndex
	Integer puckIndex, puckPortIndex
	
	portsPerJSONPacket = 16 '' One packet for each puck
	numJSONPackets = NUM_PUCKS
	
	For responseJSONPacketIndex = 0 To numJSONPackets - 1
		startPortIndex = responseJSONPacketIndex * portsPerJSONPacket
		endPortIndex = (responseJSONPacketIndex + 1) * portsPerJSONPacket - 1
		
		If dataToSend = PORT_STATES Then
			JSONResponse$ = "{'set':'port_states'"
		ElseIf dataToSend = SAMPLE_DISTANCES Then
			JSONResponse$ = "{'set':'sample_distances'"
		ElseIf dataToSend = PORT_FORCES Then
			JSONResponse$ = "{'set':'port_forces'"
		Else
			UpdateClient(TASK_MSG, "Invalid dataToSend Request!", ERROR_LEVEL)
			Exit Function
		EndIf
		
		JSONResponse$ = JSONResponse$ + ",'position':'" + GTCassettePosition$(cassette_position) + "'"
		JSONResponse$ = JSONResponse$ + ",'type':'" + GTCassetteType$(g_CassetteType(cassette_position)) + "'"
		JSONResponse$ = JSONResponse$ + ",'start':" + Str$(startPortIndex) + ",'value':["
		puckIndex = responseJSONPacketIndex
		For puckPortIndex = 0 To NUM_PUCK_PORTS - 1
			If dataToSend = PORT_STATES Then
				JSONResponse$ = JSONResponse$ + Str$(g_SP_PortStatus(cassette_position, puckIndex, puckPortIndex)) + ","
			ElseIf dataToSend = SAMPLE_DISTANCES Then
				JSONResponse$ = JSONResponse$ + FmtStr$(g_SPSampleDistanceError(cassette_position, puckIndex, puckPortIndex), "0.00") + ","
			ElseIf dataToSend = PORT_FORCES Then
				JSONResponse$ = JSONResponse$ + FmtStr$(g_SP_PortForce(cassette_position, puckIndex, puckPortIndex), "0.00") + ","
			EndIf
		Next
		JSONResponse$ = JSONResponse$ + "]}"

		UpdateClient(CLIENT_UPDATE, JSONResponse$, INFO_LEVEL)
	Next

Fend

Function GTsendPuckData(cassette_position As Integer)
	String JSONResponse$
	Integer puckIndex
	
	JSONResponse$ = "{'set':'puck_states'"
	JSONResponse$ = JSONResponse$ + ",'position':'" + GTCassettePosition$(cassette_position) + "'"
	JSONResponse$ = JSONResponse$ + ",'type':'" + GTCassetteType$(g_CassetteType(cassette_position)) + "'"
	JSONResponse$ = JSONResponse$ + ",'start':" + Str$(0)
	JSONResponse$ = JSONResponse$ + ",'value':["
	For puckIndex = 0 To NUM_PUCKS - 1
		JSONResponse$ = JSONResponse$ + Str$(g_PuckStatus(cassette_position, puckIndex)) + ","
	Next
	JSONResponse$ = JSONResponse$ + "]}"

	UpdateClient(CLIENT_UPDATE, JSONResponse$, INFO_LEVEL)
Fend

Function GTsendCassetteType(cassette_position As Integer)
	String JSONResponse$
	JSONResponse$ = "{'set':'cassette_type'"
	JSONResponse$ = JSONResponse$ + ",'position':'" + GTCassettePosition$(cassette_position) + "'"
	JSONResponse$ = JSONResponse$ + ",'min_height_error':" + Str$(g_min_height_errors(cassette_position))
	JSONResponse$ = JSONResponse$ + ",'value':'" + GTCassetteType$(g_CassetteType(cassette_position)) + "'"
	JSONResponse$ = JSONResponse$ + "}"

	UpdateClient(CLIENT_UPDATE, JSONResponse$, INFO_LEVEL)
Fend

Function GTsendCassetteData(dataToSend As Integer, cassette_position As Integer)
	If (g_CassetteType(cassette_position) = NORMAL_CASSETTE) Or (g_CassetteType(cassette_position) = CALIBRATION_CASSETTE) Then
		If dataToSend = CASSETTE_TYPE Then
			GTsendCassetteType(cassette_position)
		Else
			GTsendNormalCassetteData(dataToSend, cassette_position)
		EndIf
	ElseIf g_CassetteType(cassette_position) = SUPERPUCK_CASSETTE Then
		If dataToSend = CASSETTE_TYPE Then
			GTsendCassetteType(cassette_position)
		ElseIf dataToSend = PUCK_STATES Then
			GTsendPuckData(cassette_position)
		Else
			GTsendSuperPuckData(dataToSend, cassette_position)
		EndIf
	Else
		'' Unknown Cassette
		String JSONResponse$
		If dataToSend = PORT_STATES Then
			JSONResponse$ = "{'set':'port_states'"
		ElseIf dataToSend = SAMPLE_DISTANCES Then
			JSONResponse$ = "{'set':'sample_distances'"
		ElseIf dataToSend = PORT_FORCES Then
			JSONResponse$ = "{'set':'port_forces'"
		ElseIf dataToSend = PUCK_STATES Then
			JSONResponse$ = "{'set':'puck_states'"
		Else
			UpdateClient(TASK_MSG, "Invalid dataToSend Request!", ERROR_LEVEL)
			Exit Function
		EndIf
	
		JSONResponse$ = JSONResponse$ + ",'position':'" + GTCassettePosition$(cassette_position) + "'"
		JSONResponse$ = JSONResponse$ + ",'type':'" + GTCassetteType$(g_CassetteType(cassette_position)) + "'"
		JSONResponse$ = JSONResponse$ + ",'start':0,'value':[]}"
	
		UpdateClient(CLIENT_UPDATE, JSONResponse$, INFO_LEVEL)
	EndIf
Fend

'' Sends the state of the sample
Function GTsendSampleStateJSON
	String SampleLocationString$
    SampleLocationString$ = "'" + GTCassettePosition$(g_InterestedCassettePosition) + "',"
    SampleLocationString$ = SampleLocationString$ + Str$(GTgetPortIndexFromCassetteVars(g_InterestedCassettePosition, g_InterestedPuckColumnIndex, g_InterestedRowPuckPortIndex))

	String JSONmsg$
	JSONmsg$ = "{'set':'sample_locations', 'value':{"
	Select g_InterestedSampleStatus
		Case SAMPLE_IN_PICKER
			JSONmsg$ = JSONmsg$ + "'picker':(" + SampleLocationString$ + "),"
			JSONmsg$ = JSONmsg$ + "'placer':(),"
			JSONmsg$ = JSONmsg$ + "'cavity':(),"
			JSONmsg$ = JSONmsg$ + "'goniometer':()"
		Case SAMPLE_IN_PLACER
			JSONmsg$ = JSONmsg$ + "'picker':(),"
			JSONmsg$ = JSONmsg$ + "'placer':(" + SampleLocationString$ + "),"
			JSONmsg$ = JSONmsg$ + "'cavity':(),"
			JSONmsg$ = JSONmsg$ + "'goniometer':()"
		Case SAMPLE_IN_CAVITY
			JSONmsg$ = JSONmsg$ + "'picker':(),"
			JSONmsg$ = JSONmsg$ + "'placer':(),"
			JSONmsg$ = JSONmsg$ + "'cavity':(" + SampleLocationString$ + "),"
			JSONmsg$ = JSONmsg$ + "'goniometer':()"
		Case SAMPLE_IN_GONIO
			JSONmsg$ = JSONmsg$ + "'picker':(),"
			JSONmsg$ = JSONmsg$ + "'placer':(),"
			JSONmsg$ = JSONmsg$ + "'cavity':(),"
			JSONmsg$ = JSONmsg$ + "'goniometer':(" + SampleLocationString$ + ")"
		Default
			''Sample is either in cassette or it is lost
			JSONmsg$ = JSONmsg$ + "'picker':(),"
			JSONmsg$ = JSONmsg$ + "'placer':(),"
			JSONmsg$ = JSONmsg$ + "'cavity':(),"
			JSONmsg$ = JSONmsg$ + "'goniometer':()"
	Send
	JSONmsg$ = JSONmsg$ + "}}"

	UpdateClient(CLIENT_UPDATE, JSONmsg$, INFO_LEVEL)
Fend

